name: Pre-Release

on:
  pull_request:
    types: 
      - opened
      - synchronize
    branches:
      - master
      
jobs:

  verify-version:
    runs-on: ubuntu-latest
    outputs:
      is_snapshot: ${{ steps.test_version.outputs.IS_SNAPSHOT }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: '${{ github.head_ref }}'
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
    - name: Test version
      id: test_version
      run: echo ::set-output name=IS_SNAPSHOT::$(if [[ "${{ steps.get_version.outputs.VERSION }}" == *"-SNAPSHOT" ]]; then echo "1"; else echo "0"; fi)

  prepare-release:
    needs: verify-version
    runs-on: ubuntu-latest
    if: needs.verify-version.outputs.is_snapshot == 1
    steps:
    - uses: actions/checkout@v4
      with:
        ref: '${{ github.head_ref }}'
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Get previous version
      id: get_previous_version
      run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
    - name: Get released version
      id: get_released_version
      run: echo ::set-output name=VERSION::$(sed "s/-SNAPSHOT//g" <<<"${{ steps.get_previous_version.outputs.VERSION }}")
    - name: Get release
      id: get_release
      run: echo ::set-output name=RELEASE_HTTP_CODE::$(curl -s -o out.html -w '%{http_code}'  https://github.com/les-projets-cagnottes/core/releases/tag/${{ steps.get_released_version.outputs.VERSION }};)
    - name: Test release existence
      run: if [[ "${{ steps.get_release.outputs.RELEASE_HTTP_CODE }}" -eq "200" ]]; then exit 1; else exit 0; fi
    - name: Replace version without snapshot
      run: ./mvnw versions:set -DremoveSnapshot
    - name: Replace version without snapshot
      run: ./mvnw -f pom-cluecumber.xml versions:set -DremoveSnapshot
    - name: Push released version
      run: git config user.email "${{ secrets.GIT_CONFIG_EMAIL }}" && git config user.name "${{ secrets.GIT_CONFIG_NAME }}"
    - run: git add pom.xml pom-cluecumber.xml
    - run: git commit -m "Release '${{ steps.get_released_version.outputs.VERSION }}'"
    - run: git push origin HEAD:${{ github.head_ref }}
    